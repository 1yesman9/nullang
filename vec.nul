use Vec. from std/collections

record Vec {
    Arr<int> buffer,
    int len,
    int capacity
}

impl new() Vec {
    return Vec { 
        buffer = [],
        len = 0,
        capacity = 0 
    }
}

impl push(Vec vec, int element) bool {
    //reallocate
    if vec.capacity < vec.len + 1 { 
        if vec.capacity < 1 {
            vec.capacity = vec.capacity + 1
        } elseif vec.capacity > 0 { 
            vec.capacity = vec.capacity * 2
        }

        Vec old_buffer = vec.buffer
        vec.buffer = CALL (8, vec.capacity * 4)

        int i = 0
        while i < vec.len {
            vec.buffer[i] = old_buffer[i]
            i = i + 1
        }
    }

    vec.buffer[vec.len] = element
    vec.len = vec.len + 1
    return true
}

impl get(Vec vec, int index) int {
    return vec.buffer[index]
}

impl insert(Vec vec, int index, int element) bool {
    vec.buffer[index] = element
    return true
}

impl first(Vec vec) int {
    return vec.buffer[0]
}

impl last(Vec vec) int {
    return vec.buffer[vec.len-1]
}

impl main() bool {
    Vec vec = new()
    push(vec, 10)
    push(vec, 20)
    push(vec, 30)
    push(vec, 40)
    push(vec, 50)
    push(vec, 60)

    print(first(vec))
    print(last(vec))

    return true
}